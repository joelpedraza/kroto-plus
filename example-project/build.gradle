buildscript{
    ext {
        versions = [
                "protoc":     '3.5.1',
                "protobuf":   '3.5.1',
                "grpc":       '1.10.0',
                "kotlin":     '1.2.21',
                "coroutines": '0.22.5',
                "krotoplus":  '0.1.2'
        ]
    }

    repositories {
        jcenter()
        flatDir dirs: "../kroto-plus-gradle-plugin/build/libs/"
        flatDir dirs: "../kroto-plus-compiler/build/libs/"
    }

    dependencies{
        classpath "com.github.marcoferrer.krotoplus:kroto-plus-gradle-plugin:${versions.krotoplus}"
    }
}

plugins{
    id 'idea'
    id 'com.google.protobuf' version '0.8.4'
    id "org.jetbrains.kotlin.jvm" version "1.2.40"
}

apply plugin: 'com.github.marcoferrer.kroto-plus'

group = 'com.github.marcoferrer.krotoplus'
version = versions.krotoplus

kotlin {
    experimental { coroutines 'enable' }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    jcenter()
    flatDir dirs: "../kroto-plus-coroutines/build/libs/"
    flatDir dirs: "../kroto-plus-test/build/libs/"
}

def generatedOutputDir = "$buildDir/generated-sources/main/kotlin"

sourceSets {
    main {
        kotlin{
            srcDirs += generatedOutputDir
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}"
    compile "com.google.protobuf:protobuf-java:${versions.protobuf}"
    compile "com.github.marcoferrer.krotoplus:kroto-plus-coroutines:${versions.krotoplus}"
    compile "com.github.marcoferrer.krotoplus:kroto-plus-test:${versions.krotoplus}"

    compile "io.grpc:grpc-protobuf:${versions.grpc}",
            "io.grpc:grpc-stub:${versions.grpc}"

    testCompile "io.grpc:grpc-testing:${versions.grpc}"

    testCompile group: 'junit', name: 'junit', version: '[4,)'
    testCompile "org.jetbrains.kotlin:kotlin-test"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit"
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/kotlin/main")
        testOutputDir = file("$buildDir/classes/kotlin/test")
    }
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${versions.protoc}"}

    generatedFilesBaseDir = "$buildDir/generated-sources"

    //noinspection GroovyAssignabilityCheck
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${versions.grpc}" }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc { outputSubDir = "java" }
        }
    }
}

krotoPlus{
    //Proto definition source directories, or path to a jar containing proto definitions
    sources = [
        "$projectDir/src/main/proto",
        "$buildDir/extracted-include-protos/main"
    ]

    //The default file output directory for all generators
    defaultOutputDir = file("${protobuf.generatedFilesBaseDir}/main/kotlin")

    //Number of concurrent file writers (Default 3)
    //More does not equal better here. Too many writers can lead to a decrease in performance
    //and adjustments should be based on the overall quantity of proto files being processed.
    fileWriterCount = 4

    //Block used for enabling individual code generators and configuring their settings
    generators{
        
        stubOverloads{

            //[Optional] Output directory specific to the files created by this generator
            outputDir = file("${protobuf.generatedFilesBaseDir}/main/kotlin")

            //[Optional (Default: false)] Generate coroutine extensions for service stub rpc methods
            supportCoroutines = true
        }

        mockServices{

            //[Optional] Output directory specific to the files created by this generator
            //Normally this should point to a test sources directory
            outputDir = file("${protobuf.generatedFilesBaseDir}/main/kotlin")
        }

        //Enabling a generator with no configurable or sufficient default options
        protoTypeBuilders

        /*
            Enabling a custom external code generator
            This feature is incubating and will be fully enabled in the near future
            and include proper documentation

            external('com.some.package.MyCustomGenerator'){
                args = ['-My','cli','args']
            }
        */
    }
}

//The task responsible for running the Kroto plus compiler is called "generateKrotoPlus"
classes.dependsOn generateKrotoPlus

//Basic example of using the Kroto plus compiler cli directly
task generateKrotoPlusCliExample {
    doLast {
        javaexec {
            main = '-jar'
            args = [
                    //Path service generator fat jar
                    "../kroto-plus-compiler/build/libs/kroto-plus-compiler-${versions.krotoplus}.jar",

                    //Proto definition source directories or path to jar
                    "$projectDir/src/main/proto","$buildDir/extracted-include-protos/main",

                    //Number of concurrent file writers
                    //More does not equal better and can lead to a decrease in performance
                    "-writers","3",

                    //Generated sources output directory
                    "-default-out", generatedOutputDir,

                    //Module
                    "-ProtoTypeBuilder",

                    //Module
                    "-StubOverloads",
                    "-o|${generatedOutputDir}|-coroutines",

                    //Module
                    "-MockServices",
                    "-o|${generatedOutputDir}/test"

            ]
        }
    }
}
